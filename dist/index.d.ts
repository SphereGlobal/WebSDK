import { ChargeReqBody, Credentials, Environments, LoginBehavior, Transaction, User, iWebSDK } from './src/types';
export { Environments as SphereEnvironment } from './src/types';
export { SupportedChains } from './src/types';
export { LoginBehavior } from './src/types';
export { LoginButton } from './src/components/LoginButton';
declare class WebSDK implements iWebSDK {
    #private;
    static instance: WebSDK | undefined;
    loginType: LoginBehavior;
    clientId?: string;
    clientSecret?: string;
    redirectUri?: string;
    apiKey?: string;
    baseUrl?: string;
    user?: User | null | undefined;
    credentials?: Credentials | null;
    setClientId: (clientId: string) => this;
    setClientSecret: (clientSecret: string) => this;
    setRedirectUri: (redirectUri: string) => this;
    setApiKey: (apiKey: string) => this;
    setBaseUrl: (baseUrl: string) => this;
    setEnvironment: (environment?: Environments) => this;
    setLoginType: (loginType?: LoginBehavior) => this;
    build: () => WebSDK | undefined;
    clear: () => void;
    handleAuth: () => Promise<any>;
    handlePersistence: () => Promise<import("oidc-client-ts").User | null>;
    handleCallback: () => Promise<any>;
    login: () => Promise<any>;
    logout: () => void;
    createCharge: (charge: ChargeReqBody) => Promise<any>;
    pay: ({ toAddress, chain, symbol, amount, tokenAddress }: Transaction) => Promise<any>;
    payCharge: (transactionId: string) => Promise<any>;
    getWallets: (forceRefresh?: boolean) => Promise<any>;
    getUserInfo: (forceRefresh?: boolean) => Promise<any>;
    getBalances: (forceRefresh?: boolean) => Promise<any>;
    getNfts: (forceRefresh?: boolean) => Promise<any>;
    createIframe(width: number, height: number): HTMLIFrameElement;
    isTokenExpired: () => Promise<boolean>;
    refreshToken: () => Promise<false | import("oidc-client-ts").User | null | undefined>;
    checkTokenAndExecuteFunction: (fn: Function, property?: any, forceRefresh?: boolean) => Promise<any>;
}
export default WebSDK;
